{"method": "POST", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip, deflate, br", "Authorization": "Bearer undefined", "Content-Length": "11390", "Content-Type": "application/json", "User-Agent": "node-fetch", "Host": "127.0.0.1:5000", "Connection": "close"}, "body": "{\"model\":\"llama3.2\",\"raw\":true,\"keep_alive\":1800,\"options\":{\"num_predict\":2048,\"num_ctx\":8096},\"messages\":[{\"role\":\"user\",\"content\":\"Use the above code to answer the following question. You should not reference any files outside of what is shown, unless they are commonly known files, like a .gitignore or package.json. Reference the filenames whenever possible. If there isn't enough information to answer the question, suggest where the user might look to learn more.\\n\\n```volume_calculator.py (0-19)\\ndef calculate_volume(length, width, height):\\r\\n    return length * width * height\\r\\n\\r\\ndef main():\\r\\n    print(\\\"Welcome to Volume Calculator\\\")\\r\\n    while True:\\r\\n        try:\\r\\n            length = float(input(\\\"Enter Length: \\\"))\\r\\n            width = float(input(\\\"Enter Width: \\\"))\\r\\n            height = float(input(\\\"Enter Height: \\\"))\\r\\n            volume = calculate_volume(length, width, height)\\r\\n            print(f\\\"The volume of the cuboid is {volume} cubic units.\\\")\\r\\n            cont = input(\\\"Do you want to continue? (yes/no): \\\")\\r\\n            if cont.lower() != 'yes':\\r\\n                break\\r\\n        except ValueError:\\r\\n            print(\\\"Invalid input. Please enter a valid number.\\\")\\r\\n\\r\\nif __name__ == \\\"__main__\\\":\\r\\n    main()\\n```\\n\\n```main.py (5-6)\\ndef list_functions(directory=\\\"functions\\\"):\\r\\n    return [f for f in os.listdir(directory) if f.endswith(\\\".py\\\")]\\n```\\n\\n```main.py (8-12)\\ndef execute_file(file_path):\\r\\n    try:\\r\\n        subprocess.run([\\\"python\\\", file_path], check=True)\\r\\n    except subprocess.CalledProcessError as e:\\r\\n        print(f\\\"An error occurred while running {file_path}: {e}\\\")\\n```\\n\\n```main.py (14-47)\\ndef generate_new_function():\\r\\n    # Step 2: Get user prompt for the function\\r\\n    ...\\n```\\n\\n```main.py (49-76)\\ndef main():\\r\\n    functions_dir = \\\"functions\\\"\\r\\n    functions = list_functions(functions_dir)\\r\\n\\r\\n    while True:\\r\\n        print(\\\"\\\\nSelect an option:\\\")\\r\\n        for i, func in enumerate(functions, 1):\\r\\n            print(f\\\"{i}. {func}\\\")\\r\\n        print(f\\\"{len(functions) + 1}. Generate new function\\\")\\r\\n        print(\\\"0. Exit\\\")\\r\\n\\r\\n        try:\\r\\n            choice = int(input(\\\"Enter your choice: \\\"))\\r\\n            if choice == 0:\\r\\n                print(\\\"Exiting...\\\")\\r\\n                break\\r\\n            elif 1 <= choice <= len(functions):\\r\\n                selected_function = functions[choice - 1]\\r\\n                file_path = os.path.join(functions_dir, selected_function)\\r\\n                print(f\\\"\\\\nRunning {selected_function}...\\\\n\\\")\\r\\n                execute_file(file_path)\\r\\n            elif choice == len(functions) + 1:\\r\\n                generate_new_function()\\r\\n                functions = list_functions(functions_dir)  # Refresh the menu with the new function\\r\\n            else:\\r\\n                print(\\\"Invalid choice. Please try again.\\\")\\r\\n        except ValueError:\\r\\n            print(\\\"Please enter a valid number.\\\")\\n```\\n\\n```summary.json (0-0)\\n{'./main.py': {'functions': ['list_functions', 'execute_file', 'generate_new_function', 'main'], 'classes': []}, './summary.py': {'functions': ['extract_codebase_summary'], 'classes': []}, './functions\\\\\\\\add.py': {'functions': ['add'], 'classes': []}, './functions\\\\\\\\celsius_to_fahrenheit.py': {'functions': ['celsius_to_fahrenheit', 'main'], 'classes': []}, './functions\\\\\\\\subtract.py': {'functions': ['subtract'], 'classes': []}, './functions\\\\\\\\volume_calculator.py': {'functions': ['calculate_volume', 'main'], 'classes': []}}\\n```\\n\"},{\"role\":\"assistant\",\"content\":\"\"},{\"role\":\"user\",\"content\":\"```c:\\\\Users\\\\Roman\\\\Desktop\\\\llm test\\\\main.py\\nimport os\\r\\nimport subprocess\\r\\nimport requests\\r\\nimport re\\r\\n\\r\\ndef list_functions(directory=\\\"functions\\\"):\\r\\n    return [f for f in os.listdir(directory) if f.endswith(\\\".py\\\")]\\r\\n\\r\\ndef execute_file(file_path):\\r\\n    try:\\r\\n        subprocess.run([\\\"python\\\", file_path], check=True)\\r\\n    except subprocess.CalledProcessError as e:\\r\\n        print(f\\\"An error occurred while running {file_path}: {e}\\\")\\r\\n\\r\\ndef generate_new_function():\\r\\n    # Step 2: Get user prompt for the function\\r\\n    user_prompt = input(\\\"Describe the function you need (e.g., 'I need a function to calculate area of a rectangle'): \\\")\\r\\n    \\r\\n    # Add instruction to Ollama prompt for correct response format\\r\\n    ollama_prompt = f\\\"{user_prompt}\\\\n\\\\nYour response should consist of and name for the file that i should create and Python code containing only utf-8 charecters,starting from a new line no other description. The Python code should include a main function to allow CLI interaction and that function shloud be called only one time, no infinite loops. and only python code shloud be in code brackets name of the file should be outside without any brackets,\\\"\\r\\n    \\r\\n    # Step 3: Call the Ollama API with TinyLlama model\\r\\n    try:\\r\\n        response = requests.post(\\r\\n            \\\"http://192.168.10.109:11434/api/generate\\\",\\r\\n            json={\\\"model\\\": \\\"llama3.2\\\", \\\"prompt\\\": ollama_prompt,\\\"stream\\\": False}\\r\\n        )\\r\\n        response.raise_for_status()\\r\\n        result = response.json()\\r\\n        \\r\\n        # Extract response text (which includes filename and code)\\r\\n        response_text = result.get(\\\"response\\\")\\r\\n        #print(response_text)\\r\\n        # Use regex to find filename and code within triple backticks (```...```)\\r\\n        match = re.search(r\\\"([a-zA-Z0-9_]+\\\\.py)\\\\s*```(?:python)?\\\\s*(.*?)```\\\", response_text, re.DOTALL)\\r\\n        if match:\\r\\n            filename, code = match.groups()\\r\\n            file_path = os.path.join(\\\"functions\\\", filename)\\r\\n            \\r\\n            # Save the code to a new Python file in the functions directory\\r\\n            with open(file_path, \\\"w\\\") as f:\\r\\n                f.write(code.strip())\\r\\n            print(f\\\"New function '{filename}' has been created.\\\")\\r\\n        else:\\r\\n            print(\\\"Failed to parse the function filename and code. Please try again.\\\")\\r\\n\\r\\n    except requests.exceptions.RequestException as e:\\r\\n        print(f\\\"Error calling Ollama API: {e}\\\")\\r\\n\\r\\ndef main():\\r\\n    functions_dir = \\\"functions\\\"\\r\\n    functions = list_functions(functions_dir)\\r\\n\\r\\n    while True:\\r\\n        print(\\\"\\\\nSelect an option:\\\")\\r\\n        for i, func in enumerate(functions, 1):\\r\\n            print(f\\\"{i}. {func}\\\")\\r\\n        print(f\\\"{len(functions) + 1}. Generate new function\\\")\\r\\n        print(\\\"0. Exit\\\")\\r\\n\\r\\n        try:\\r\\n            choice = int(input(\\\"Enter your choice: \\\"))\\r\\n            if choice == 0:\\r\\n                print(\\\"Exiting...\\\")\\r\\n                break\\r\\n            elif 1 <= choice <= len(functions):\\r\\n                selected_function = functions[choice - 1]\\r\\n                file_path = os.path.join(functions_dir, selected_function)\\r\\n                print(f\\\"\\\\nRunning {selected_function}...\\\\n\\\")\\r\\n                execute_file(file_path)\\r\\n            elif choice == len(functions) + 1:\\r\\n                generate_new_function()\\r\\n                functions = list_functions(functions_dir)  # Refresh the menu with the new function\\r\\n            else:\\r\\n                print(\\\"Invalid choice. Please try again.\\\")\\r\\n        except ValueError:\\r\\n            print(\\\"Please enter a valid number.\\\")\\r\\n\\r\\nif __name__ == \\\"__main__\\\":\\r\\n    main()\\r\\n\\n```\\n\\nmain.py \"},{\"role\":\"assistant\",\"content\":\"\"},{\"role\":\"user\",\"content\":\"```c:\\\\Users\\\\Roman\\\\Desktop\\\\llm test\\\\functions\\\\add.py\\ndef add():\\r\\n    try:\\r\\n        num1 = float(input(\\\"Enter the first number: \\\"))\\r\\n        num2 = float(input(\\\"Enter the second number: \\\"))\\r\\n        result = num1 + num2\\r\\n        print(f\\\"The result of addition is: {result}\\\")\\r\\n    except ValueError:\\r\\n        print(\\\"Invalid input. Please enter numbers only.\\\")\\r\\n\\r\\nif __name__ == \\\"__main__\\\":\\r\\n    add()\\r\\n\\n```\\n\\nadd.py \"},{\"role\":\"assistant\",\"content\":\"\"},{\"role\":\"user\",\"content\":\"Use the above code to answer the following question. You should not reference any files outside of what is shown, unless they are commonly known files, like a .gitignore or package.json. Reference the filenames whenever possible. If there isn't enough information to answer the question, suggest where the user might look to learn more.\\n\\n```subtract.py (0-11)\\ndef subtract():\\r\\n    try:\\r\\n        num1 = float(input(\\\"Enter the first number: \\\"))\\r\\n        num2 = float(input(\\\"Enter the second number: \\\"))\\r\\n        result = num1 - num2\\r\\n        print(f\\\"The result of subtraction is: {result}\\\")\\r\\n    except ValueError:\\r\\n        print(\\\"Invalid input. Please enter numbers only.\\\")\\r\\n\\r\\nif __name__ == \\\"__main__\\\":\\r\\n    subtract()\\r\\n\\n```\\n\\n```volume_calculator.py (0-19)\\ndef calculate_volume(length, width, height):\\r\\n    return length * width * height\\r\\n\\r\\ndef main():\\r\\n    print(\\\"Welcome to Volume Calculator\\\")\\r\\n    while True:\\r\\n        try:\\r\\n            length = float(input(\\\"Enter Length: \\\"))\\r\\n            width = float(input(\\\"Enter Width: \\\"))\\r\\n            height = float(input(\\\"Enter Height: \\\"))\\r\\n            volume = calculate_volume(length, width, height)\\r\\n            print(f\\\"The volume of the cuboid is {volume} cubic units.\\\")\\r\\n            cont = input(\\\"Do you want to continue? (yes/no): \\\")\\r\\n            if cont.lower() != 'yes':\\r\\n                break\\r\\n        except ValueError:\\r\\n            print(\\\"Invalid input. Please enter a valid number.\\\")\\r\\n\\r\\nif __name__ == \\\"__main__\\\":\\r\\n    main()\\n```\\n\\n```main.py (5-6)\\ndef list_functions(directory=\\\"functions\\\"):\\r\\n    return [f for f in os.listdir(directory) if f.endswith(\\\".py\\\")]\\n```\\n\\n```main.py (8-12)\\ndef execute_file(file_path):\\r\\n    try:\\r\\n        subprocess.run([\\\"python\\\", file_path], check=True)\\r\\n    except subprocess.CalledProcessError as e:\\r\\n        print(f\\\"An error occurred while running {file_path}: {e}\\\")\\n```\\n\\n```main.py (14-47)\\ndef generate_new_function():\\r\\n    # Step 2: Get user prompt for the function\\r\\n    ...\\n```\\n\\n```main.py (49-76)\\ndef main():\\r\\n    functions_dir = \\\"functions\\\"\\r\\n    functions = list_functions(functions_dir)\\r\\n\\r\\n    while True:\\r\\n        print(\\\"\\\\nSelect an option:\\\")\\r\\n        for i, func in enumerate(functions, 1):\\r\\n            print(f\\\"{i}. {func}\\\")\\r\\n        print(f\\\"{len(functions) + 1}. Generate new function\\\")\\r\\n        print(\\\"0. Exit\\\")\\r\\n\\r\\n        try:\\r\\n            choice = int(input(\\\"Enter your choice: \\\"))\\r\\n            if choice == 0:\\r\\n                print(\\\"Exiting...\\\")\\r\\n                break\\r\\n            elif 1 <= choice <= len(functions):\\r\\n                selected_function = functions[choice - 1]\\r\\n                file_path = os.path.join(functions_dir, selected_function)\\r\\n                print(f\\\"\\\\nRunning {selected_function}...\\\\n\\\")\\r\\n                execute_file(file_path)\\r\\n            elif choice == len(functions) + 1:\\r\\n                generate_new_function()\\r\\n                functions = list_functions(functions_dir)  # Refresh the menu with the new function\\r\\n            else:\\r\\n                print(\\\"Invalid choice. Please try again.\\\")\\r\\n        except ValueError:\\r\\n            print(\\\"Please enter a valid number.\\\")\\n```\\n\\nHELLO\"}]}"}
